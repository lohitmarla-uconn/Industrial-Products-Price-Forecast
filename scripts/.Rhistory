# Identify numeric columns with missing values
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
#write.csv(industrial.price.data, "file.csv")
cor_matrix <- cor(as.matrix(industrial.price.data))
# Assuming your correlation matrix is stored in 'cor_matrix'
threshold <- 0.96
# Create a logical matrix indicating which correlations meet the condition
cor_condition <- abs(cor_matrix) < threshold
# Extract the names of variables that meet the condition
selected_variables <- colnames(cor_matrix)[apply(cor_condition, MARGIN = 2, any)]
# Print the selected variables
selected_variables
# Print the summary of the model
#summary(lm_model)
vif_values <- vif(lm(Total..Industrial.product.price.index..IPPI. ~ ., data = as.data.frame(industrial.price.data)))
library(tidyverse)
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/food_data_selected.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
# Identify numeric columns with missing values
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
#write.csv(industrial.price.data, "file.csv")
cor_matrix <- cor(as.matrix(industrial.price.data))
# Assuming your correlation matrix is stored in 'cor_matrix'
threshold <- 0.96
# Create a logical matrix indicating which correlations meet the condition
cor_condition <- abs(cor_matrix) < threshold
# Extract the names of variables that meet the condition
selected_variables <- colnames(cor_matrix)[apply(cor_condition, MARGIN = 2, any)]
# Print the selected variables
selected_variables
# Print the summary of the model
#summary(lm_model)
vif_values <- vif(lm(Total..Industrial.product.price.index..IPPI. ~ ., data = as.data.frame(industrial.price.data)))
plot(vif_values)
selected_variables
cor_matrix
pairs(cor_matrix)
n.train <- 700 #length(train set)
train.alldat <- data.frame(industrial.price.data[1:n.train, ])
test.alldat <- data.frame(industrial.price.data[(n.train + 1):nrow(industrial.price.data), ])
lm_model <- lm( Total..Industrial.product.price.index..IPPI. ~ ., data = train.alldat)
summary(lm_model)
res <- residuals(lm_model)
car::qqPlot(res, main = NA, pch = 19, col = 2, cex = 0.7)
colnames(industrial.price.data)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
ts_multivariate <- ts(industrial.price.data[: 2, ncol(industrial.price.data)], start = c(1956, 1), end = c(2023, 11), frequency = 12)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
ts_multivariate <- ts(industrial.price.data, start = c(1956, 1), end = c(2023, 11), frequency = 12)
# Print the resulting multivariate time series object
print(ts_multivariate)
response_variable <- ts_res  # Replace with your actual time series data
fit <- auto.arima(ts_res, xreg = regmat.train)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
ts_multivariate <- ts(industrial.price.data, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = regmat.train)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
ts_multivariate <- ts(industrial.price.data, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
print(cor_matrix)
# Check VIF
vif_values <- car::vif(lm(ts_res ~ ts_multivariate))
cor_matrix
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
print(cor_matrix)
# Check VIF
vif_values <- car::vif(lm(ts_res ~ ts_multivariate))
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
print(cor_matrix)
fit <- forecast::auto.arima(ts_res, xreg = ts_multivariate, checkcollinearity = TRUE)
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
ts_multivariate <- ts(industrial.price.data, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
ts_multivariate <- ts(industrial.price.data, start = c(1956, 1), end = c(2023, 11), frequency = 12)
# Assuming ts_multivariate is your multivariate time series
subset_ts_multivariate <- ts_multivariate[, -which(names(ts_multivariate) == "Total..Industrial.product.price.index..IPPI.")]
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, subset_ts_multivariate)))
dim(ts_multivariate)
colnames(industrial.price.data)
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
industrial.price.data <- industrial.price.data[:, c("Fresh.and.frozen.beef.and.veal..." , "Fresh.and.frozen.pork..." )]
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
industrial.price.data <- industrial.price.data[, c("Fresh.and.frozen.beef.and.veal..." , "Fresh.and.frozen.pork..." )]
ts_multivariate <- ts(industrial.price.data, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
library(tidyverse)
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/food_data_selected.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
# Identify numeric columns with missing values
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
#write.csv(industrial.price.data, "file.csv")
cor_matrix <- cor(as.matrix(industrial.price.data))
# Assuming your correlation matrix is stored in 'cor_matrix'
threshold <- 0.96
# Create a logical matrix indicating which correlations meet the condition
cor_condition <- abs(cor_matrix) < threshold
# Extract the names of variables that meet the condition
selected_variables <- colnames(cor_matrix)[apply(cor_condition, MARGIN = 2, any)]
# Print the selected variables
selected_variables
# Print the summary of the model
#summary(lm_model)
vif_values <- vif(lm(Total..Industrial.product.price.index..IPPI. ~ ., data = as.data.frame(industrial.price.data)))
print(vif_values)
n.train <- 700 #length(train set)
train.alldat <- data.frame(industrial.price.data[1:n.train, ])
test.alldat <- data.frame(industrial.price.data[(n.train + 1):nrow(industrial.price.data), ])
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
industrial.price.data_ <- industrial.price.data[, c("Fresh.and.frozen.beef.and.veal..." , "Fresh.and.frozen.pork..." )]
ts_multivariate <- ts(industrial.price.data_, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
fit
library(tidyverse)
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/food_data_selected.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
# Identify numeric columns with missing values
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
#write.csv(industrial.price.data, "file.csv")
cor_matrix <- cor(as.matrix(industrial.price.data))
# Assuming your correlation matrix is stored in 'cor_matrix'
threshold <- 0.96
# Create a logical matrix indicating which correlations meet the condition
cor_condition <- abs(cor_matrix) < threshold
# Extract the names of variables that meet the condition
selected_variables <- colnames(cor_matrix)[apply(cor_condition, MARGIN = 2, any)]
# Print the selected variables
selected_variables
# Print the summary of the model
#summary(lm_model)
vif_values <- vif(lm(Total..Industrial.product.price.index..IPPI. ~ ., data = as.data.frame(industrial.price.data)))
print(vif_values)
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI."  )]
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI." )]
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
#industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI." )]
# Assuming ts_multivariate is your multivariate time series
industrial.price.data_ <- industrial.price.data[, -which(names(industrial.price.data) == "Total..Industrial.product.price.index..IPPI.")]
ts_multivariate <- ts(industrial.price.data_, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
fit
# Check correlation matrix
cor_matrix <- cor(ts_multivariate)
vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
print(vif_values)
ts_res <- ts(industrial.price.data$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
#industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI." )]
# Assuming ts_multivariate is your multivariate time series
industrial.price.data_ <- industrial.price.data[, -which(names(industrial.price.data) == "Total..Industrial.product.price.index..IPPI.")]
ts_multivariate <- ts(industrial.price.data_, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
fit
res <- residuals(fit)
car::qqPlot(res, main = NA, pch = 19, col = 2, cex = 0.7)
acf(resid(fit), ylim = c(-1, 1), main = "", xlab = "lag h")
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/food_data_selected.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
n.train <- 700 #length(train set)
train.alldat <- data.frame(industrial.price.data[1:n.train, ])
test.alldat <- data.frame(industrial.price.data[(n.train + 1):nrow(industrial.price.data), ])
# Check correlation matrix
#cor_matrix <- cor(ts_multivariate)
#vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
#print(vif_values)
ts_res <- ts(train.alldat$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
#industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI." )]
# Assuming ts_multivariate is your multivariate time series
industrial.price.data_ <- train.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")]
ts_multivariate <- ts(industrial.price.data_, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
fit
res <- residuals(fit)
car::qqPlot(res, main = NA, pch = 19, col = 2, cex = 0.7)
acf(resid(fit), ylim = c(-1, 1), main = "", xlab = "lag h")
regmat.test <- as.matrix(test.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")])
armaxfcst.all <- forecast(fit, xreg = regmat.test)
armaxfcst.all
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/food_data_selected.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
n.train <- 700 #length(train set)
train.alldat <- data.frame(industrial.price.data[1:n.train, ])
test.alldat <- data.frame(industrial.price.data[(n.train + 1):nrow(industrial.price.data), ])
# Check correlation matrix
#cor_matrix <- cor(ts_multivariate)
#vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
#print(vif_values)
ts_res <- ts(train.alldat$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
#industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI." )]
# Assuming ts_multivariate is your multivariate time series
industrial.price.data_ <- train.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")]
ts_multivariate <- ts(industrial.price.data_, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
fit
res <- residuals(fit)
car::qqPlot(res, main = NA, pch = 19, col = 2, cex = 0.7)
acf(resid(fit), ylim = c(-1, 1), main = "", xlab = "lag h")
regmat.test <- as.matrix(test.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")])
armaxfcst.all <- forecast(fit, xreg = regmat.test)
armaxfcst.all
(armaxfcst <- armaxfcst.all$mean)
(armaxfcsterr <- test.alldat$Total..Industrial.product.price.index..IPPI. - armaxfcst)
(me.armaxfcst <- mean(armaxfcsterr))  #ME
(mpe.armaxfcst <- 100*(mean(armaxfcsterr/test.alldat$Total..Industrial.product.price.index..IPPI.))) # MPE
(mse.armaxfcst <- sum(armaxfcsterr**2)/nrow(test.alldat))      # MSE
(mae.armaxfcst <- mean(abs(armaxfcsterr)))                # MAE
(mape.armaxfcst <- 100*mean(abs(armaxfcsterr/test.alldat$cmort))) # MAPE
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/food_data_selected.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
n.train <- 700 #length(train set)
train.alldat <- data.frame(industrial.price.data[1:n.train, ])
test.alldat <- data.frame(industrial.price.data[(n.train + 1):nrow(industrial.price.data), ])
# Check correlation matrix
#cor_matrix <- cor(ts_multivariate)
#vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
#print(vif_values)
ts_res <- ts(train.alldat$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
#industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI." )]
# Assuming ts_multivariate is your multivariate time series
industrial.price.data_ <- train.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")]
ts_multivariate <- ts(industrial.price.data_, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
fit
res <- residuals(fit)
car::qqPlot(res, main = NA, pch = 19, col = 2, cex = 0.7)
acf(resid(fit), ylim = c(-1, 1), main = "", xlab = "lag h")
regmat.test <- as.matrix(test.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")])
armaxfcst.all <- forecast(fit, xreg = regmat.test)
armaxfcst.all
(armaxfcst <- armaxfcst.all$mean)
(armaxfcsterr <- test.alldat$Total..Industrial.product.price.index..IPPI. - armaxfcst)
(me.armaxfcst <- mean(armaxfcsterr))  #ME
(mpe.armaxfcst <- 100*(mean(armaxfcsterr/test.alldat$Total..Industrial.product.price.index..IPPI.))) # MPE
(mse.armaxfcst <- sum(armaxfcsterr**2)/nrow(test.alldat))      # MSE
(mae.armaxfcst <- mean(abs(armaxfcsterr)))                # MAE
(mape.armaxfcst <- 100*mean(abs(armaxfcsterr/test.alldat$Total..Industrial.product.price.index..IPPI.))) # MAPE
mape.armaxfcst
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/food_data_selected.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
n.train <- 700 #length(train set)
train.alldat <- data.frame(industrial.price.data[1:n.train, ])
test.alldat <- data.frame(industrial.price.data[(n.train + 1):nrow(industrial.price.data), ])
# Check correlation matrix
#cor_matrix <- cor(ts_multivariate)
#vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
#print(vif_values)
ts_res <- ts(train.alldat$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
#industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI." )]
# Assuming ts_multivariate is your multivariate time series
industrial.price.data_ <- train.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")]
ts_multivariate <- ts(industrial.price.data_, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
fit
cmort.lmfits <- fitted(fit)
cmort.lmresid <- resid(fit)
par(mfrow=c(1,2))
plot(cmort.lmfits, cmort.lmresid, main = "", xlab = "fitted values",
ylab = "residuals")
car::qqPlot(cmort.lmresid, main = "")
res <- residuals(fit)
car::qqPlot(res, main = NA, pch = 19, col = 2, cex = 0.7)
acf(resid(fit), ylim = c(-1, 1), main = "", xlab = "lag h")
regmat.test <- as.matrix(test.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")])
armaxfcst.all <- forecast(fit, xreg = regmat.test)
armaxfcst.all
(armaxfcst <- armaxfcst.all$mean)
(armaxfcsterr <- test.alldat$Total..Industrial.product.price.index..IPPI. - armaxfcst)
(me.armaxfcst <- mean(armaxfcsterr))  #ME
(mpe.armaxfcst <- 100*(mean(armaxfcsterr/test.alldat$Total..Industrial.product.price.index..IPPI.))) # MPE
(mse.armaxfcst <- sum(armaxfcsterr**2)/nrow(test.alldat))      # MSE
(mae.armaxfcst <- mean(abs(armaxfcsterr)))                # MAE
(mape.armaxfcst <- 100*mean(abs(armaxfcsterr/test.alldat$Total..Industrial.product.price.index..IPPI.))) # MAPE
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/food_data_selected.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
n.train <- 700 #length(train set)
train.alldat <- data.frame(industrial.price.data[1:n.train, ])
test.alldat <- data.frame(industrial.price.data[(n.train + 1):nrow(industrial.price.data), ])
# Check correlation matrix
#cor_matrix <- cor(ts_multivariate)
#vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
#print(vif_values)
ts_res <- ts(train.alldat$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
# Convert the dataframe to a multivariate time series object
#industrial.price.data_ <- industrial.price.data[, -c("Total..Industrial.product.price.index..IPPI." )]
# Assuming ts_multivariate is your multivariate time series
industrial.price.data_ <- train.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")]
ts_multivariate <- ts(industrial.price.data_, start = c(1956, 1), end = c(2023, 11), frequency = 12)
fit <- auto.arima(ts_res, xreg = ts_multivariate)
fit
cmort.lmfits <- fitted(fit)
cmort.lmresid <- resid(fit)
par(mfrow=c(1,2))
plot(cmort.lmfits, cmort.lmresid, main = "", xlab = "fitted values",
ylab = "residuals")
car::qqPlot(cmort.lmresid, main = "")
res <- residuals(fit)
car::qqPlot(res, main = NA, pch = 19, col = 2, cex = 0.7)
acf(resid(fit), ylim = c(-1, 1), main = "", xlab = "lag h")
regmat.test <- as.matrix(test.alldat[, -which(names(train.alldat) == "Total..Industrial.product.price.index..IPPI.")])
armaxfcst.all <- forecast(fit, xreg = regmat.test)
armaxfcst.all
(armaxfcst <- armaxfcst.all$mean)
(armaxfcsterr <- test.alldat$Total..Industrial.product.price.index..IPPI. - armaxfcst)
(me.armaxfcst <- mean(armaxfcsterr))  #ME
(mpe.armaxfcst <- 100*(mean(armaxfcsterr/test.alldat$Total..Industrial.product.price.index..IPPI.))) # MPE
(mse.armaxfcst <- sum(armaxfcsterr**2)/nrow(test.alldat))      # MSE
(mae.armaxfcst <- mean(abs(armaxfcsterr)))                # MAE
(mape.armaxfcst <- 100*mean(abs(armaxfcsterr/test.alldat$Total..Industrial.product.price.index..IPPI.))) # MAPE
industrial.price.data <- read.csv("~/Documents/GitHub/GitHub/Industrial-Products-Price-Forecast/data/Transformed_Industrial_Food_Prices.csv")
date <- industrial.price.data$North.American.Product.Classification.System..NAPCS.
names(industrial.price.data) <- gsub("[[:space:][:digit:]]", "", names(industrial.price.data))
industrial.price.data <- industrial.price.data[2: ncol(industrial.price.data)]
numeric_columns <- sapply(industrial.price.data, is.numeric)
columns_with_missing_values <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data[numeric_columns])) > 0]
# Impute missing values in numeric columns with the mean
for (col in columns_with_missing_values) {
mean_value <- mean(industrial.price.data[, col], na.rm = TRUE)
mean_value <- round(mean_value, 2)
industrial.price.data[, col][is.na(industrial.price.data[, col])] <- mean_value
}
# Identify columns with all null values
empty_columns <- colnames(industrial.price.data)[colSums(is.na(industrial.price.data)) >= 1]
# Drop columns with all null values
industrial.price.data <- industrial.price.data[, -which(colnames(industrial.price.data) %in% empty_columns)]
n.train <- 700 #length(train set)
train.alldat <- data.frame(industrial.price.data[1:n.train, ])
test.alldat <- data.frame(industrial.price.data[(n.train + 1):nrow(industrial.price.data), ])
# Check correlation matrix
#cor_matrix <- cor(ts_multivariate)
#vif_values <- car::vif(lm(ts_res ~ ., data = cbind(ts_res, ts_multivariate)))
#print(vif_values)
ts_res <- ts(train.alldat$Total..Industrial.product.price.index..IPPI., start = c(1956, 1) , end = c(2023, 11), frequency = 12 )
colnames(industrial.price.data)
